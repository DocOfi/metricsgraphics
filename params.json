{"name":"Metricsgraphics","tagline":"An htmlwidget interface to the MetricsGraphics.js D3 chart library","body":"Mozilla released the [MetricsGraphics.js library](http://metricsgraphicsjs.org/) back in November of 2014 ([gh repo](https://github.com/mozilla/metrics-graphics)) and was greeted with great fanfare. It's primary focus is on crisp, clean layouts for interactive time-series data, but they have support for other chart types as well (though said support is far from comprehensive).\r\n\r\nI had been pondering building an R package to help generate these charts when Ramnath Vaidyanathan, Kenton Russell &amp; JJ Allaire came up with the insanely awesome [htmlwidgets](http://www.htmlwidgets.org/) R package, which is the best javascript<->R bridge to-date. Here's a quick take on how to make a basic line chart before going into some package (and MetricsGraphics) details:\r\n\r\n```r\r\nlibrary(metricsgraphics)\r\n\r\ntmp <- data.frame(year=seq(1790, 1970, 10), uspop=as.numeric(uspop))\r\n\r\ntmp %>%\r\n  mjs_plot(x=year, y=uspop) %>%\r\n  mjs_line() %>%\r\n  mjs_add_marker(1850, \"Something Wonderful\") %>%\r\n  mjs_add_baseline(150, \"Something Awful\")\r\n```\r\n\r\n<center><b>Example of Basic MetricsGrahics Chart</b><iframe style=\"max-width=100%\" src=\"1.html\" sandbox=\"allow-same-origin allow-scripts\" width=\"100%\" height=\"350\" scrolling=\"no\" seamless=\"seamless\" frameBorder=\"0\"></iframe></center>\r\n\r\nOne of the package goals (which should be evident from the example) is that it had to conform to the new \"piping\" idiom, made popular through the [magrittr](https://github.com/smbache/magrittr), [ggvis](http://ggvis.rstudio.com/) and [dplyr](http://github.com/dplyr) packages. This made it possible to avoid one function with a ton of parameters and help break out the chart building into logical steps. While it may not have the flexibility of `ggplot2`, you can do some neat things with MetricsGraphics charts, like use multiple lines:\r\n\r\n```r\r\nset.seed(1492)\r\nstocks <- data.frame(\r\n  time = as.Date('2009-01-01') + 0:9,\r\n  X = rnorm(10, 0, 1),\r\n  Y = rnorm(10, 0, 2),\r\n  Z = rnorm(10, 0, 4))\r\n\r\nstocks %>%\r\n  mjs_plot(x=time, y=X, width=500, height=350) %>%\r\n  mjs_line() %>%\r\n  mjs_add_line(Y) %>%\r\n  mjs_add_line(Z) %>%\r\n  mjs_axis_x(xax_format=\"date\") %>%\r\n  mjs_add_legend(c(\"X\", \"Y\", \"Z\"))\r\n```\r\n\r\n<center><b>Stocks X, Y & Z over time</b><iframe style=\"max-width=100%\" src=\"2.html\" sandbox=\"allow-same-origin allow-scripts\" width=\"100%\" height=\"450\" scrolling=\"no\" seamless=\"seamless\" frameBorder=\"0\"></iframe></center>\r\n\r\nand, pretty configurable scatterplots:\r\n\r\n```r\r\nlibrary(RColorBrewer)\r\n\r\nmtcars %>%\r\n  mjs_plot(x=wt, y=mpg, width=500, height=350) %>%\r\n  mjs_point(color_accessor=cyl,\r\n            x_rug=TRUE, y_rug=TRUE,\r\n            size_accessor=carb,\r\n            size_range=c(5, 10),\r\n            color_type=\"category\",\r\n            color_range=brewer.pal(n=11, name=\"RdBu\")[c(1, 5, 11)]) %>%\r\n  mjs_labs(x=\"Weight of Car\", y=\"Miles per Gallon\")\r\n```\r\n\r\n<center><b>Motor Trend Cars - mpg~wt</b><iframe style=\"max-width=100%\" src=\"3.html\" sandbox=\"allow-same-origin allow-scripts\" width=\"100%\" height=\"350\" scrolling=\"no\" seamless=\"seamless\" frameBorder=\"0\"></iframe></center>\r\n\r\nThe `htmlwidgets` developers go into [great detail](http://www.htmlwidgets.org/develop_intro.html) on how to create a widget, but there are some central points I'll cover and potentially reiterate. \r\n\r\nFirst, use the `htmlwidgets::scaffoldWidget` that `htmlwidgets` provides to kickstart your project. It'll setup the essentials and free your time up to work on the interface components. You will need to edit the generated `yaml` file to use the minified javascript files for things like jquery or d3 since Chrome will be unhappy if you don't.\r\n\r\nNext, remember that all you're doing is building an R object with data to be passed into a javascript function/environment. MetricsGraphics made this a bit easier for me since the main graphic configuration is one, giant parameter list (take a look at the `metricsgraphics.js` source in github). \r\n\r\nThird, if you need to customize the html generation function in the main `packagename_html` file, ensure you pass in `class` to the main `div` element. I was very pleased to discover that you can return a list of HTML elements vs  a single one:\r\n\r\n```r\r\nmetricsgraphics_html <- function(id, style, class, ...) {\r\n  list(tags$div(id = id, class = class, style=style),\r\n       tags$div(id = sprintf(\"%s-legend\", id), class = sprintf(\"%s-legend\", class)))\r\n}\r\n```\r\n\r\nand that may eventually enable support for facet-like functionality without manually creating multiple plots.\r\n\r\nFourth, try to build around the piping idiom. It makes it so much easier to add parameters and manage the data environment. \r\n\r\nFifth, use `iframe`s for embedding your visualizations in other documents (like this blog post). It avoids potential namespace collisions and frees you from having to cut/paste HTML from one doc to another.\r\n\r\nAnd, lastly, remember that you can generate your own `elementId` in the event you need to use it with your javascript visualization library (like I had to).\r\n\r\nCurrently, `metricsgraphics` is at 0.4.1 and has support for most of the basic chart types along with linking charts (in `Rmd` files). You can install it from the [github repo](https://github.com/hrbrmstr/metricsgraphics) and make sure to file all issues or feature requests there. If you make something with it like @abresler [did](http://asbcllc.com/blog/2015/January/ww2_tanks/), drop a note in the comments!\r\n\r\nNow, go forth and wrap some libraries!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}